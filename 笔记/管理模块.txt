
=================

功能确定：


岗位 + 用户 + 部门：增删查改


部门列表分层显示 ： 

      查询 分类     查询顶层

                    查询上级部门的子分层( parentId )

		    懒加载问题：配置spring提供的过滤器，打开此次请求的session


      分层小功能 ： 返回上一级请求

                    添加页面请求    上级部门默认选择 分层页面的上级部门

		    提交添加请求     默认转入        之前的分层页面


         


部门列表树状显示：  

       遍历树的集合：   遍历顶点
       （工具类）
			遍历子树( 递归 )

			前缀( 随递归次数递增)


       页 面 显 示：    树状显示的集合


       工具类小功能：   防止直接修改session缓存中的model : 创建model副本

                        实体类的Set属性无序 : 配置order-by属性

                        





==================

分析设计：


分层结构：Action  +  Service( 原Service +　Dao )


实体类：

		 hbm.xml
	岗位类 ――――――――――> 岗位表

                 hbm.xml
	部门类 ――――――――――> 部门表

		 hbm.xml
	用户类 ――――――――――> 用户表




====================

代码开发：

数据访问层：

	    公共 DaoSupport<T> 接口		公共DaoSupportImpl<T>类 : @Transactional( 事务注解可以被子类继承 )        继承接口DepartmentService : @Service

						sessionFactory( 取得session )                       
	    
						clazz( 泛型的class类 )
						------------------------
	    findALL()				createQuery(...).list()                                                   findTopList()

	    findById(Long id)                   get(clazz, id)								  findChildrenList(Long parentId)

	    deleteById(Long id)                 delete(t)

	    save(T t)				save(t)

	    update(T t)                         update(t)

	    findByIds(Long[] ids)		createQuery(...).list()

           -------------------------------------------------------------------------------------------------------------------------------------------------------

	

表现层：  

	  公共BaseAction<T>类extends ActionSupport implements ModelDriven<T>            继承子类 : @Controller + @Scope("prototype")                   

          model( 泛型的对象 )								parameter( 接受请求中的参数 )
											---------
	  roleService等									setParameter()
          -----------									getParameter()		
	  getMoodel()

          ---------------------------------------------------------------------------------------------------------------------------


	   功能		请求	             action方法 ----- 返回值               页面
	---------    -----------------------------------------------------------------------

	   列表	       _list?parentId        list()        list                  list.jsp
	 
	   删除	       _delete?parentId      delete()      toList                新请求?parentId

	   添加	       _addUI?parentId       addUI()       saveUI                saveUI.jsp

	   添加	       _add                  add()         toList                新请求?parentId

	   修改	       _editUI               editUI()      saveUI                saveUI.jsp

	   修改	       _edit                 edit()        toList                新请求?parentId

	  
	   返回上级    _list?parentId=%{#parent.parent.id}



业务逻辑层：

	   页面请求	       (action方法                   操作)								    页面
	  ------------------------------------------------------------------------------------------------------------------------------------------------------
									     parentId
	   列表			list()		       读数据库(回显数据)  ------------>  顶级部门/该parentId下的子部门          读取ValueStack
	   
						       读数据库(分层页面对应的上级部门) ：用于返回上一级部门请求                 产生新请求
									    					   
						       写到ValueStack

	  --------------------------------------------------------------

	   删除			delete()               写数据库

	  --------------------------------------------------------------

	   添加页面		addUI()		       读数据库(回显数据：树顶点集合)		读：回显数据             写：数据库
												   -----------------------------------
						       读工具类(树状显示的集合)			    修改对象                 model对象

						       写到ValueStack				    设置/修改的属性          修改对象
						                                                   -----------------------------------
												    工具类数据 	             ValueStack					    
	   提交添加 		add()		       读数据库(要设置的属性)			    	
												    级联属性                 parameter属性
						       写到model对象

						       写数据库
	  --------------------------------------------------------------

	   修改页面	        editUI()               读数据库(回显数据：树顶点集合)

						       读工具类(树状显示的集合)							

						       写到ValueStack
						       ------------------
						       读数据库(修改对象)

						       写到ValueStack
						       ------------------
						       读数据库(级联属性)

						       写到parameter属性

	  ---------------------------------------------------------------	
		    
	    提交修改		edit()		       读数据库(修改对象)

						       读数据库(要修改的属性)

						       写到该修改对象

						       写数据库

          ----------------------------------------------------------------						      



	     
